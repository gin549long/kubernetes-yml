apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql #指定deployment的名字
  namespace: default
  labels:  
    app: mysql 
spec: #规约
  replicas: 1 
  selector:  #selector字段定义Deployment如何查找要管理的Pods。必须匹配.spec.template.metadata.labels，否则请求会被 API 拒绝。
    matchLabels:
      app: mysql
  template: #Deployment Pod 模板；它和 Pod 的语法规则完全相同。 只是这里它是嵌套的，因此不需要 apiVersion 或 kind。
    metadata:
      labels:
        app: mysql
    spec: #pod模板规约
     # nodeSelector: 
      # k8s: master
      nodeName: 192.168.10.12
      restartPolicy: Always
      containers: #容器
      - name: mysql
        image: mysql:5.7.35
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "123"
        ports:
        - containerPort: 3306
        volumeMounts: 
        - name: time-zone                   # 容器内挂载点名称
          mountPath: /etc/localtime         # 容器内挂载点路径，可以是文件或目录
        - name: mycnf                   # 容器内挂载点名称
          mountPath: /etc/mysql/my.cnf
        - name: mysqlstorage
          mountPath: /var/lib/mysql #容器内对应的路径。MySQL的数据都在这个里面，需要持久化的也就是这个路径下的内容
      volumes:
      - name: time-zone                       # 数据卷名称，需要与容器内挂载点名称一致
        hostPath:
         path: /etc/localtime                # 挂载到容器里的路径，将localtime文件挂载到容器里，可让容器使用本地的时区
      - name: mycnf
        hostPath:
         path: /data/my.cnf
      - name: mysqlstorage
        hostPath: 
         path: /data/mysql
         type: Directory

